#!/usr/bin/env python3
import logging
from logging.handlers import RotatingFileHandler
import subprocess
import shlex
import sys
import os

LOG_DIR = os.path.join(os.path.dirname(_file_), "logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOG_PATH = os.path.join(LOG_DIR, "commands.log")

logger = logging.getLogger("command_recorder")
logger.setLevel(logging.DEBUG)

fmt = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")

file_handler = RotatingFileHandler(LOG_PATH, maxBytes=1_000_000, backupCount=5, encoding="utf-8")
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(fmt)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(fmt)

if not logger.handlers:
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

def run_and_log(cmd_line: str):
    logger.info("INPUT: %s", cmd_line)
    try:
        # Choose parsing strategy:
        # On Windows, many users prefer shell=True for built-ins; on POSIX, shlex.split is typical.
        use_shell = os.name == "nt"
        args = cmd_line if use_shell else shlex.split(cmd_line)

        completed = subprocess.run(
            args,
            shell=use_shell,
            capture_output=True,
            text=True
        )

        if completed.stdout:
            for line in completed.stdout.rstrip("\n").splitlines():
                logger.info("STDOUT: %s", line)
        if completed.stderr:
            for line in completed.stderr.rstrip("\n").splitlines():
                logger.error("STDERR: %s", line)

        logger.info("RETURN_CODE: %s", completed.returncode)
    except Exception as e:
        logger.exception("EXCEPTION while executing command: %s", e)

def main():
    print("Command Recorder: type a command and press Enter. Ctrl+D (POSIX) or Ctrl+Z+Enter (Windows) to exit.")
    while True:
        try:
            line = input("> ").strip()
        except EOFError:
            print()
            break
        if not line:
            continue
        if line.lower() in {"exit", "quit"}:
            break
        run_and_log(line)

if _name_ == "_main_":
    main()
